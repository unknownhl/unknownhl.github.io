{"meta":{"title":"HL","subtitle":"","description":"黄黎的博客","author":"黄黎","url":"https://unknownhl.github.io","root":"/"},"pages":[{"title":"about","date":"2022-05-26T08:08:30.000Z","updated":"2022-05-26T08:08:30.678Z","comments":true,"path":"about/index.html","permalink":"https://unknownhl.github.io/about/index.html","excerpt":"","text":""},{"title":"code","date":"2022-05-26T08:07:06.000Z","updated":"2022-05-26T08:07:06.254Z","comments":true,"path":"code/index.html","permalink":"https://unknownhl.github.io/code/index.html","excerpt":"","text":""},{"title":"document","date":"2022-05-26T08:06:42.000Z","updated":"2022-05-26T08:06:42.073Z","comments":true,"path":"document/index.html","permalink":"https://unknownhl.github.io/document/index.html","excerpt":"","text":""}],"posts":[{"title":"理解attention","slug":"理解attention","date":"2022-05-29T06:29:32.000Z","updated":"2022-05-29T06:34:40.284Z","comments":true,"path":"2022/05/29/理解attention/","link":"","permalink":"https://unknownhl.github.io/2022/05/29/%E7%90%86%E8%A7%A3attention/","excerpt":"知乎上的一篇文章，记录一下","text":"知乎上的一篇文章，记录一下 一文看懂 Attention（本质原理+3大优点+5大类型 Encoder-Decoder 和 Seq2Seq nlp学习网站","categories":[{"name":"nlp","slug":"nlp","permalink":"https://unknownhl.github.io/categories/nlp/"}],"tags":[{"name":"attention","slug":"attention","permalink":"https://unknownhl.github.io/tags/attention/"}],"author":"黄黎"},{"title":"Predicting issue types on GitHub","slug":"Predicting-issue-types-on-GitHub","date":"2022-05-26T09:05:42.000Z","updated":"2022-05-28T08:21:00.002Z","comments":true,"path":"2022/05/26/Predicting-issue-types-on-GitHub/","link":"","permalink":"https://unknownhl.github.io/2022/05/26/Predicting-issue-types-on-GitHub/","excerpt":"Ticket Tagger可以为GitHub项目上的问题自动分配合适的标签，它的核心是一个机器学习模型，通过分析问题的标题和文本描述，以确定该问题是否可以被标记为bug、enhancement和question。具体方法为fastText，baseline为J48，它是一个决策树机器学习算法。该篇文章2021年发表在Science of Computer Programming。原文链接","text":"Ticket Tagger可以为GitHub项目上的问题自动分配合适的标签，它的核心是一个机器学习模型，通过分析问题的标题和文本描述，以确定该问题是否可以被标记为bug、enhancement和question。具体方法为fastText，baseline为J48，它是一个决策树机器学习算法。该篇文章2021年发表在Science of Computer Programming。原文链接 摘要Ticket Tagger通过机器学习技术分析问题的标题和描述，自动识别在GitHub上提交的报告类型，并相应地给每个问题分配标签 背景为了减轻代码潜在的失败，问题追踪系统Issue tracking systems被用于有效地标记，管理和解决软件系统中出现的tickets或潜在问题，并被要求及时反馈。而在实际的GitHub项目中，问题提交者简答提供问题标题和描述就可创建一条问题报告，GitHub提供定制化的标签系统标记问题报告，这样有两个好处，一是具有更好的管理和优先级，二是可以分类和筛选问题报告。问题就是费时费力容易出错。 为了帮助维护者处理问题，我们开发了Ticket Tagger，一个能够自动标记问题报告的工具。与之前旨在自动识别问题类型的方法不同，由于GitHub（根据其轻量级结构）不提供任何关于此类问题的结构化信息，我们的工具完全依赖于报告的标题和描述中包含的文本特征，以便在报告提交后立即对其进行自动标记。这对有兴趣处理新问题的开发者来说是有益的。评估了使用不同的机器学习策略所取得的分类性能，并研究了不同类型的混杂因素在多大程度上会降低分类结果。 方法选择fastText，这是一个使用线性模型的工具，具有等级约束和快速损失近似，能够实现与几个基于深度学习的方法相当的分类结果。 问题报告预处理和矢量表示法 为了让fastText线性分类器进行问题类型预测，报告的标题和正文被串联成一个文本段落。然后对所得文本进行标记，标记后的文本是获得问题的词包表示的来源。这个词包表示，其中每个词都由一个n-grams字符向量表示，是基于fastText的分类器的输入。 问题分类 fastText模型通过在N个可能的标签上最小化以下目标函数对问题进行分类。$$-\\frac{1}{N}\\sum_{n&#x3D;1}^{N}{y_n}{log(f(BA\\chi_n))}$$其中，xn是一个特征包，A代表平均文本嵌入的权重字典，B是将嵌入转换为每个类别的预软化值的权重字典，f是用于最小化计算复杂性的分层softmax函数。 通过使用大多数参数的默认值来设置fastText，并应用了以下定制。 不捕捉词的n-gram特征，即wordNgrams参数。只考虑在数据集中至少出现14次的词，即minCount参数。 这两种设置都是根据服务器硬件的磁盘限制来应用的。事实上，这些决定使我们能够获得一个需要不到5MB磁盘空间的训练模型，同时只施加了&lt;10%的性能损失。 Ticket Tagger 目前能够根据反映作者意图的三个类别对问题进行分类：bug report, enhancement, and question。这些标签被默认包含在每个GitHub仓库中，它们是GitHub上使用最多的三个标签。显然，模型被设计成可以很容易地重新训练，以使Ticket Tagger适应特定项目的需要，从而实现对更多问题类型的预测。 当一个新的问题报告被提交到安装了Ticket Tagger的GitHub仓库时，该工具会自动为新报告分配一个相关标签。具体来说，Ticket Tagger是一个基于Node.js的GitHub应用程序，它可以自动（i）从GitHub仓库收集问题报告信息（ii）利用之前讨论的预训练的fastText模型，为新报告的问题贴上标签。该应用可以免费使用，并且可以很容易地安装到任何现有的GitHub仓库。通过浏览Ticket Tagger应用的网页，要在目标仓库上安装Ticket Tagger，仓库管理员必须点击 “安装 “按钮，指定仓库，就可以了。从这一刻起，如图 1 所示，当用户在仓库中打开一个新的问题时，GitHub 会调用 Ticket Tagger 所暴露的hook endpoint，并引用与新创建问题相关的信息。这些信息被应用程序用来对票据进行分类。为了给问题报告自动贴上标签，GitHub为Ticket Tagger提供了一个临时访问令牌，通过给问题分配预测的标签来消耗该令牌。由Ticket Tagger执行的自动问题标签允许开发者(i)及时对紧急问题做出反应，(ii)推迟不那么急迫的任务（如增强请求），或(iii)将问题分配给特定用户。 评估数据集构建 为了评估Ticket Tagger对GitHub问题的分类效果，论文收集了两个数据集。第一个数据集D_balanced，包含30,000个问题。这个数据集首先从12,112个异质项目中收集问题，这是用Google BigQuery查询GitHub档案获得的。在这个初始步骤之后，论文从2018年2月期间关闭的所有GitHub问题集中随机抽出问题，从而选择所有标签与以下字符串匹配的问题：bug report, enhancement, and question。通过这个随机选择过程，我们平均为每个项目选择了2.48个问题（中位数&#x3D;1，标准差&#x3D;15.78）。在30,000个问题中，有三分之一的问题被分配了bug标签；三分之一的问题被分配了enhancement标签；而剩下的10,000个问题被分配了question标签。为了构建第二个数据集，D_unbalanced，论文使用Google BigQuery对GitHub Archive进行了一次查询，查询了GitHub Archive中2018年3月1日至9日期间包含三个标签中任何一个的问题，即bug、enhancement和question，获得了大约34000个问题。16,355（48%）被标记为bug，14,228（41.8%）被标记为增强，3,458（10.2%）问题。第一个数据集，D_balanced，包含每个类别的相同数量的票据，而第二个数据集，D_unbalanced，呈现出标签的不平衡分布，更能代表现实。 评估方法 实验的目的有两个方面。一方面，将Ticker Tagger与一个基线方法进行比较，以观察更简单的基于ML的方法是否能够取得与Ticker Tagger相当或更好的结果。另一方面，评估Ticket Tagger在多大程度上能够自动识别正确的标签，以分配给现实场景中的问题报告。更具体地说，将Ticket Tagger与J48机器学习（ML）算法进行比较，该算法在以前有关评估文本分类问题的ML策略的工作中被成功使用。为了进行这样的比较，在D_balanced上采用了10折交叉验证策略来评估Ticket Tagger和基线J48 ML算法取得的分类性能。为了训练J48模型，利用数据集中问题的标题和描述中包含的所有术语来建立一个document-term矩阵M，其中每一行代表数据集中的一个问题，每一列代表一个术语。上述矩阵中的每个条目Mij代表第i个问题中第j个术语的权重或重要性，根据tf-idf加权方案计算，该方案在最近关于GitHub问题和漏洞的分类工作中已经成功使用。值得注意的是，为了确保两个模型之间的公平比较，在应用 J48 时，论文没有进行任何模型的调整和数据的预处理，因为 fastText 也是以同样的方式使用。此外，评估是在没有用于减少fastText的磁盘空间的自定义设置的情况下进行的（在第二节中描述）。为了评估Ticket Tagger在现实环境中识别问题类型的能力，即问题类型的不平衡分布，论文进行了进一步的实验，其中Ticket Tagger在整个平衡数据集D_balanced上进行训练，而不平衡数据集D_unbalanced则被用于评估分类性能。这种特殊的设置，即平衡的训练集和不平衡的测试集，是由于需要避免所产生的模型偏向于大多数类别。著名的信息检索指标，即精度、召回率和F-measure，在我们的实验中被用来评估分类性能。 对混杂因素的讨论 1.功能词的影响。对于属于bug和enhancement类别的问题，精确度和召回率都在0.70以上，而Ticket Tagger对question类别产生了更多的假阳性和假阴性，也就是说，对于这个类别，精确度和召回率都比较低。我们认为，在问题的标题或描述中大量使用功能词，例如 “如何 “或 “什么”，这些词通常会引入question，这可能导致分类器错误地将问题标签分配给实际上属于不同类别的问题，因此，这降低了问题类别的精度。此外，这个类别的召回率较低，这可能与开发人员（和用户）对广泛的主题提出问题有关，这使得我们很难学习所有可能导致分配这个标签的模式。 2.问题的语言一致性的影响：我们观察issue的语言是否会影响我们模型的性能。因此，我们生成了两个数据集，一个包含24,600个issue，另一个是由24,600个issue组成的基线数据集，其中的随机issue采用了在数据集构建部分描述的相同策略。为了生成包含24,600张英文issue的数据集，我们使用了一个guess language的javascript端口，这是一个使用基于字符集和trigrams的启发式工具来自动检测文本的语言。结果表明，问题单中的语言一致性对分类性能有积极影响。 3.问题中的代码片段的存在：我们观察问题中的代码片段的存在是否会影响我们模型的表现。因此，我们产生了两个数据集，一个是含有代码片段的6000个issue，另一个是使用前面提到的方法随机抽样的6000个issue的基线数据集。特别是，代码片段的存在是通过检测包含在三重反斜线中的文本片段来识别的，这是GitHub Flavored Markdownlanguage推荐的特殊语法，用于突出代码片段。结果显示，代码片段的存在并没有明显影响分类性能。 结论在这项工作中，我们提出了Ticket Tagger，这是我们在GitHub市场上发布的一个应用，它可以为GitHub项目上的问题自动分配合适的标签。Ticket Tagger的核心是一个机器学习模型，它分析问题的标题和文本描述，以确定该问题是否可以被标记为错误报告、功能请求或问题。为了评估我们的工具所取得的分类性能，我们进行了四个主要的评估实验。评估结果表明，Ticket Tagger能够以相当高的精度和召回率自动分配标签，其结果优于基线方法。我们的研究结果还表明，使用一致的语言可以提高Ticket Tagger的分类性能，而代码片段的存在并不影响结果。未来的工作旨在（i）将Ticket Tagger的准确性和功能与其他现有的解决方案进行比较，以及（ii）通过分析终端用户的直接反馈来研究其实用性。","categories":[{"name":"论文","slug":"论文","permalink":"https://unknownhl.github.io/categories/%E8%AE%BA%E6%96%87/"}],"tags":[{"name":"issue report label","slug":"issue-report-label","permalink":"https://unknownhl.github.io/tags/issue-report-label/"}],"author":"黄黎"}],"categories":[{"name":"nlp","slug":"nlp","permalink":"https://unknownhl.github.io/categories/nlp/"},{"name":"论文","slug":"论文","permalink":"https://unknownhl.github.io/categories/%E8%AE%BA%E6%96%87/"}],"tags":[{"name":"attention","slug":"attention","permalink":"https://unknownhl.github.io/tags/attention/"},{"name":"issue report label","slug":"issue-report-label","permalink":"https://unknownhl.github.io/tags/issue-report-label/"}]}